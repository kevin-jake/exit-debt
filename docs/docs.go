// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/google/callback": {
            "get": {
                "description": "Process the callback from Google OAuth",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Handle Google OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code from Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Missing code parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to handle Google callback",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/google/login": {
            "post": {
                "description": "Authenticate a user with Google ID token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login with Google",
                "parameters": [
                    {
                        "description": "Google ID token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.GoogleLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid Google token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/google/url": {
            "get": {
                "description": "Get the URL for Google OAuth login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Google OAuth URL",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of debts with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "List debts",
                "parameters": [
                    {
                        "enum": [
                            "PENDING",
                            "PAID",
                            "OVERDUE"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DEBT",
                            "LOAN"
                        ],
                        "type": "string",
                        "description": "Filter by type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by currency",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by end date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contains 'debts' array of models.Debt and 'total' count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debts/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new debt or loan record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "Create a new debt",
                "parameters": [
                    {
                        "description": "Debt details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateDebtRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Debt"
                        }
                    },
                    "400": {
                        "description": "Invalid request body/Invalid amount/Invalid due date",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debts/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get summary of all debts including total amounts owed and owed to others",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "Get debt summary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve details of a specific debt",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "Get a debt by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Debt ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Debt"
                        }
                    },
                    "400": {
                        "description": "Missing debt ID/Invalid debt ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Debt not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of an existing debt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "Update a debt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Debt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated debt details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateDebtRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Debt"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Debt not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing debt",
                "tags": [
                    "debts"
                ],
                "summary": "Delete a debt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Debt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid debt ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Debt not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debts/{id}/payment": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a payment to an existing debt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debts"
                ],
                "summary": "Add payment to debt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Debt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body/Invalid amount",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Debt not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of notifications with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List notifications",
                "parameters": [
                    {
                        "enum": [
                            "PAYMENT_DUE",
                            "PAYMENT_RECEIVED",
                            "PAYMENT_OVERDUE"
                        ],
                        "type": "string",
                        "description": "Filter by notification type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "READ",
                            "UNREAD"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contains 'notifications' array and 'total' count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/mark-read": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark multiple notifications as read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark notifications as read",
                "parameters": [
                    {
                        "description": "Notification IDs to mark as read",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.MarkAsReadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/preferences": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's current notification preferences",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get notification preferences",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NotificationPreference"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/preferences/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user's notification preferences including channels and types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Update notification preferences",
                "parameters": [
                    {
                        "description": "Notification preferences",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdatePreferencesRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body/Invalid notification channel/Invalid notification type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/unread-count": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the count of unread notifications for the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get unread notification count",
                "responses": {
                    "200": {
                        "description": "Contains 'count' field with number of unread notifications",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's settings including currency, language, and notification preferences",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get user settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings/currencies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of supported currency codes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get supported currencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Currency"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings/digest-frequencies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of supported notification digest frequencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get supported digest frequencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings/languages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of supported language codes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get supported languages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/settings/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user's settings including currency, language, and notification preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update user settings",
                "parameters": [
                    {
                        "description": "Updated settings",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserSettings"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body/Invalid currency code/Invalid time zone/Invalid language code/Invalid digest frequency",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AddPaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 50.25
                }
            }
        },
        "handler.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "example": "user@example.com"
                        },
                        "first_name": {
                            "type": "string",
                            "example": "John"
                        },
                        "id": {
                            "type": "string",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "last_name": {
                            "type": "string",
                            "example": "Doe"
                        },
                        "mobile_number": {
                            "type": "string",
                            "example": "+1234567890"
                        },
                        "username": {
                            "type": "string",
                            "example": "johndoe"
                        }
                    }
                }
            }
        },
        "handler.CreateDebtRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 100.5
                },
                "creditor_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                },
                "currency": {
                    "type": "string",
                    "example": "Php"
                },
                "debtor_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "description": {
                    "type": "string",
                    "example": "Lunch payment"
                },
                "due_date": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "DEBT",
                        "LOAN"
                    ],
                    "example": "DEBT"
                }
            }
        },
        "handler.GoogleLoginRequest": {
            "type": "object",
            "properties": {
                "id_token": {
                    "type": "string",
                    "example": "google.id.token.string"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                }
            }
        },
        "handler.MarkAsReadRequest": {
            "type": "object",
            "properties": {
                "notification_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"123e4567-e89b-12d3-a456-426614174000\"]"
                    ]
                }
            }
        },
        "handler.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "mobile_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "handler.UpdateDebtRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 150.75
                },
                "currency": {
                    "type": "string",
                    "example": "EUR"
                },
                "description": {
                    "type": "string",
                    "example": "Updated lunch payment"
                },
                "due_date": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "PAID",
                        "OVERDUE"
                    ],
                    "example": "PAID"
                }
            }
        },
        "handler.UpdatePreferencesRequest": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "EMAIL",
                            "SMS",
                            "MESSENGER"
                        ],
                        "$ref": "#/definitions/service.NotificationChannel"
                    },
                    "example": [
                        "[\"EMAIL\"",
                        "\"SMS\"]"
                    ]
                },
                "days_in_advance": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 3
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "types": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "PAYMENT_DUE",
                            "PAYMENT_RECEIVED",
                            "PAYMENT_OVERDUE"
                        ],
                        "$ref": "#/definitions/service.NotificationType"
                    },
                    "example": [
                        "[\"PAYMENT_DUE\"",
                        "\"PAYMENT_RECEIVED\"]"
                    ]
                }
            }
        },
        "models.Contact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "debts": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Debt"
                    }
                },
                "email": {
                    "type": "string"
                },
                "facebook_messenger_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "mobile_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Currency": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "models.Debt": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "category": {
                    "$ref": "#/definitions/models.DebtCategory"
                },
                "category_id": {
                    "type": "string"
                },
                "contact": {
                    "$ref": "#/definitions/models.Contact"
                },
                "contact_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DebtInstallment"
                    }
                },
                "is_installment": {
                    "type": "boolean"
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Payment"
                    }
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.DebtStatus"
                },
                "type": {
                    "$ref": "#/definitions/models.DebtType"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.DebtCategory": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "debts": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Debt"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.DebtInstallment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "debt_id": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Payment"
                    }
                },
                "status": {
                    "$ref": "#/definitions/models.DebtStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.DebtStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "PAID",
                "OVERDUE"
            ],
            "x-enum-varnames": [
                "DebtStatusPending",
                "DebtStatusPaid",
                "DebtStatusOverdue"
            ]
        },
        "models.DebtType": {
            "type": "string",
            "enum": [
                "BORROWED",
                "LENT"
            ],
            "x-enum-varnames": [
                "DebtTypeBorrowed",
                "DebtTypeLent"
            ]
        },
        "models.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "debt_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/definitions/models.PaymentMethod"
                },
                "notes": {
                    "type": "string"
                },
                "payer_id": {
                    "type": "string"
                },
                "payment_date": {
                    "type": "string"
                },
                "receiver_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.PaymentStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.PaymentMethod": {
            "type": "string",
            "enum": [
                "CASH",
                "BANK_TRANSFER",
                "CREDIT_CARD",
                "OTHER"
            ],
            "x-enum-varnames": [
                "PaymentMethodCash",
                "PaymentMethodBankTransfer",
                "PaymentMethodCreditCard",
                "PaymentMethodOther"
            ]
        },
        "models.PaymentStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "PaymentStatusPending",
                "PaymentStatusCompleted",
                "PaymentStatusFailed",
                "PaymentStatusCancelled"
            ]
        },
        "models.UserSettings": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_currency": {
                    "type": "string"
                },
                "digest_frequency": {
                    "description": "daily, weekly, monthly",
                    "type": "string"
                },
                "email_digest": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "reminder_days_before": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "timezone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "service.NotificationChannel": {
            "type": "string",
            "enum": [
                "EMAIL",
                "SMS",
                "MESSENGER"
            ],
            "x-enum-varnames": [
                "EmailChannel",
                "SMSChannel",
                "MessengerChannel"
            ]
        },
        "service.NotificationPreference": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NotificationChannel"
                    }
                },
                "days_in_advance": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NotificationType"
                    }
                }
            }
        },
        "service.NotificationType": {
            "type": "string",
            "enum": [
                "DEBT_DUE_REMINDER",
                "PAYMENT_RECEIVED",
                "PAYMENT_OVERDUE",
                "DEBT_STATUS_CHANGED"
            ],
            "x-enum-varnames": [
                "DebtDueReminder",
                "PaymentReceived",
                "PaymentOverdue",
                "DebtStatusChanged"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Debt Tracker API",
	Description:      "A comprehensive debt tracking application API with authentication, debt management, and multi-channel notifications.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
