basePath: /api
definitions:
  handler.AddPaymentRequest:
    properties:
      amount:
        example: 50.25
        type: number
    type: object
  handler.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        properties:
          email:
            example: user@example.com
            type: string
          first_name:
            example: John
            type: string
          id:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
          last_name:
            example: Doe
            type: string
          mobile_number:
            example: "+1234567890"
            type: string
          username:
            example: johndoe
            type: string
        type: object
    type: object
  handler.CreateDebtRequest:
    properties:
      amount:
        example: 100.5
        type: number
      creditor_id:
        example: 123e4567-e89b-12d3-a456-426614174001
        type: string
      currency:
        example: Php
        type: string
      debtor_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      description:
        example: Lunch payment
        type: string
      due_date:
        example: "2024-12-31T23:59:59Z"
        type: string
      type:
        enum:
          - DEBT
          - LOAN
        example: DEBT
        type: string
    type: object
  handler.GoogleLoginRequest:
    properties:
      id_token:
        example: google.id.token.string
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword123
        type: string
    type: object
  handler.MarkAsReadRequest:
    properties:
      notification_ids:
        example:
          - '["123e4567-e89b-12d3-a456-426614174000"]'
        items:
          type: string
        type: array
    type: object
  handler.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      mobile_number:
        example: "+1234567890"
        type: string
      password:
        example: strongpassword123
        type: string
      username:
        example: johndoe
        type: string
    type: object
  handler.UpdateDebtRequest:
    properties:
      amount:
        example: 150.75
        type: number
      currency:
        example: EUR
        type: string
      description:
        example: Updated lunch payment
        type: string
      due_date:
        example: "2024-12-31T23:59:59Z"
        type: string
      status:
        enum:
          - PENDING
          - PAID
          - OVERDUE
        example: PAID
        type: string
    type: object
  handler.UpdatePreferencesRequest:
    properties:
      channels:
        example:
          - '["EMAIL"'
          - '"SMS"]'
        items:
          $ref: "#/definitions/service.NotificationChannel"
          enum:
            - EMAIL
            - SMS
            - MESSENGER
        type: array
      days_in_advance:
        example: 3
        minimum: 0
        type: integer
      enabled:
        example: true
        type: boolean
      types:
        example:
          - '["PAYMENT_DUE"'
          - '"PAYMENT_RECEIVED"]'
        items:
          $ref: "#/definitions/service.NotificationType"
          enum:
            - PAYMENT_DUE
            - PAYMENT_RECEIVED
            - PAYMENT_OVERDUE
        type: array
    type: object
  models.Contact:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      debts:
        description: Relationships
        items:
          $ref: "#/definitions/models.Debt"
        type: array
      email:
        type: string
      facebook_messenger_id:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      mobile_number:
        type: string
      updated_at:
        type: string
    type: object
  models.Currency:
    properties:
      code:
        type: string
      symbol:
        type: string
    type: object
  models.Debt:
    properties:
      amount:
        type: number
      category:
        $ref: "#/definitions/models.DebtCategory"
      category_id:
        type: string
      contact:
        $ref: "#/definitions/models.Contact"
      contact_id:
        type: string
      created_at:
        type: string
      currency:
        type: string
      due_date:
        type: string
      id:
        type: string
      installments:
        items:
          $ref: "#/definitions/models.DebtInstallment"
        type: array
      is_installment:
        type: boolean
      payments:
        items:
          $ref: "#/definitions/models.Payment"
        type: array
      reason:
        type: string
      status:
        $ref: "#/definitions/models.DebtStatus"
      type:
        $ref: "#/definitions/models.DebtType"
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.DebtCategory:
    properties:
      created_at:
        type: string
      debts:
        description: Relationships
        items:
          $ref: "#/definitions/models.Debt"
        type: array
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.DebtInstallment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      debt_id:
        type: string
      due_date:
        type: string
      id:
        type: string
      payments:
        items:
          $ref: "#/definitions/models.Payment"
        type: array
      status:
        $ref: "#/definitions/models.DebtStatus"
      updated_at:
        type: string
    type: object
  models.DebtStatus:
    enum:
      - PENDING
      - PAID
      - OVERDUE
    type: string
    x-enum-varnames:
      - DebtStatusPending
      - DebtStatusPaid
      - DebtStatusOverdue
  models.DebtType:
    enum:
      - BORROWED
      - LENT
    type: string
    x-enum-varnames:
      - DebtTypeBorrowed
      - DebtTypeLent
  models.Payment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      currency:
        type: string
      debt_id:
        type: string
      description:
        type: string
      id:
        type: string
      method:
        $ref: "#/definitions/models.PaymentMethod"
      notes:
        type: string
      payer_id:
        type: string
      payment_date:
        type: string
      receiver_id:
        type: string
      status:
        $ref: "#/definitions/models.PaymentStatus"
      updated_at:
        type: string
    type: object
  models.PaymentMethod:
    enum:
      - CASH
      - BANK_TRANSFER
      - CREDIT_CARD
      - OTHER
    type: string
    x-enum-varnames:
      - PaymentMethodCash
      - PaymentMethodBankTransfer
      - PaymentMethodCreditCard
      - PaymentMethodOther
  models.PaymentStatus:
    enum:
      - PENDING
      - COMPLETED
      - FAILED
      - CANCELLED
    type: string
    x-enum-varnames:
      - PaymentStatusPending
      - PaymentStatusCompleted
      - PaymentStatusFailed
      - PaymentStatusCancelled
  models.UserSettings:
    properties:
      created_at:
        type: string
      default_currency:
        type: string
      digest_frequency:
        description: daily, weekly, monthly
        type: string
      email_digest:
        type: boolean
      id:
        type: string
      language:
        type: string
      reminder_days_before:
        items:
          type: integer
        type: array
      timezone:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  service.NotificationChannel:
    enum:
      - EMAIL
      - SMS
      - MESSENGER
    type: string
    x-enum-varnames:
      - EmailChannel
      - SMSChannel
      - MessengerChannel
  service.NotificationPreference:
    properties:
      channels:
        items:
          $ref: "#/definitions/service.NotificationChannel"
        type: array
      days_in_advance:
        type: integer
      enabled:
        type: boolean
      types:
        items:
          $ref: "#/definitions/service.NotificationType"
        type: array
    type: object
  service.NotificationType:
    enum:
      - DEBT_DUE_REMINDER
      - PAYMENT_RECEIVED
      - PAYMENT_OVERDUE
      - DEBT_STATUS_CHANGED
    type: string
    x-enum-varnames:
      - DebtDueReminder
      - PaymentReceived
      - PaymentOverdue
      - DebtStatusChanged
host: localhost:8080
info:
  contact: {}
  description:
    A comprehensive debt tracking application API with authentication,
    debt management, and multi-channel notifications.
  title: Debt Tracker API
  version: "1.0"
paths:
  /auth/google/callback:
    get:
      description: Process the callback from Google OAuth
      parameters:
        - description: Authorization code from Google
          in: query
          name: code
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handler.AuthResponse"
        "400":
          description: Missing code parameter
          schema:
            type: string
        "500":
          description: Failed to handle Google callback
          schema:
            type: string
      summary: Handle Google OAuth callback
      tags:
        - auth
  /auth/google/login:
    post:
      consumes:
        - application/json
      description: Authenticate a user with Google ID token
      parameters:
        - description: Google ID token
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.GoogleLoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handler.AuthResponse"
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Invalid Google token
          schema:
            type: string
      summary: Login with Google
      tags:
        - auth
  /auth/google/url:
    get:
      description: Get the URL for Google OAuth login
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Google OAuth URL
      tags:
        - auth
  /auth/login:
    post:
      consumes:
        - application/json
      description: Authenticate a user with email and password
      parameters:
        - description: Login credentials
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handler.AuthResponse"
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login user
      tags:
        - auth
  /auth/register:
    post:
      consumes:
        - application/json
      description: Register a new user with email and password
      parameters:
        - description: Registration details
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.RegisterRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handler.AuthResponse"
        "400":
          description: Invalid request body
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
        - auth
  /debts:
    get:
      description: Get a paginated list of debts with optional filters
      parameters:
        - description: Filter by status
          enum:
            - PENDING
            - PAID
            - OVERDUE
          in: query
          name: status
          type: string
        - description: Filter by type
          enum:
            - DEBT
            - LOAN
          in: query
          name: type
          type: string
        - description: Filter by currency
          in: query
          name: currency
          type: string
        - description: Filter by start date
          in: query
          name: start_date
          type: string
        - description: Filter by end date
          in: query
          name: end_date
          type: string
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: 0
          description: Number of items to skip
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Contains 'debts' array of models.Debt and 'total' count
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: List debts
      tags:
        - debts
  /debts/{id}:
    delete:
      description: Delete an existing debt
      parameters:
        - description: Debt ID
          in: path
          name: id
          required: true
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid debt ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Debt not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Delete a debt
      tags:
        - debts
    get:
      description: Retrieve details of a specific debt
      parameters:
        - description: Debt ID
          in: query
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Debt"
        "400":
          description: Missing debt ID/Invalid debt ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Debt not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get a debt by ID
      tags:
        - debts
    put:
      consumes:
        - application/json
      description: Update details of an existing debt
      parameters:
        - description: Debt ID
          in: path
          name: id
          required: true
          type: string
        - description: Updated debt details
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.UpdateDebtRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Debt"
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Debt not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Update a debt
      tags:
        - debts
  /debts/{id}/payment:
    post:
      consumes:
        - application/json
      description: Add a payment to an existing debt
      parameters:
        - description: Debt ID
          in: path
          name: id
          required: true
          type: string
        - description: Payment details
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.AddPaymentRequest"
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request body/Invalid amount
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Debt not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Add payment to debt
      tags:
        - debts
  /debts/create:
    post:
      consumes:
        - application/json
      description: Create a new debt or loan record
      parameters:
        - description: Debt details
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.CreateDebtRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.Debt"
        "400":
          description: Invalid request body/Invalid amount/Invalid due date
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Create a new debt
      tags:
        - debts
  /debts/summary:
    get:
      description:
        Get summary of all debts including total amounts owed and owed
        to others
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: number
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get debt summary
      tags:
        - debts
  /notifications:
    get:
      description: Get a paginated list of notifications with optional filters
      parameters:
        - description: Filter by notification type
          enum:
            - PAYMENT_DUE
            - PAYMENT_RECEIVED
            - PAYMENT_OVERDUE
          in: query
          name: type
          type: string
        - description: Filter by status
          enum:
            - READ
            - UNREAD
          in: query
          name: status
          type: string
        - description: Number of items per page
          in: query
          name: limit
          type: integer
        - description: Number of items to skip
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Contains 'notifications' array and 'total' count
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: List notifications
      tags:
        - notifications
  /notifications/mark-read:
    post:
      consumes:
        - application/json
      description: Mark multiple notifications as read
      parameters:
        - description: Notification IDs to mark as read
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.MarkAsReadRequest"
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Mark notifications as read
      tags:
        - notifications
  /notifications/preferences:
    get:
      description: Get user's current notification preferences
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/service.NotificationPreference"
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get notification preferences
      tags:
        - notifications
  /notifications/preferences/update:
    put:
      consumes:
        - application/json
      description: Update user's notification preferences including channels and types
      parameters:
        - description: Notification preferences
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/handler.UpdatePreferencesRequest"
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description:
            Invalid request body/Invalid notification channel/Invalid notification
            type
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Update notification preferences
      tags:
        - notifications
  /notifications/unread-count:
    get:
      description: Get the count of unread notifications for the user
      produces:
        - application/json
      responses:
        "200":
          description: Contains 'count' field with number of unread notifications
          schema:
            additionalProperties:
              type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get unread notification count
      tags:
        - notifications
  /settings:
    get:
      description:
        Get current user's settings including currency, language, and notification
        preferences
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.UserSettings"
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get user settings
      tags:
        - settings
  /settings/currencies:
    get:
      description: Get list of supported currency codes
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: "#/definitions/models.Currency"
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get supported currencies
      tags:
        - settings
  /settings/digest-frequencies:
    get:
      description: Get list of supported notification digest frequencies
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get supported digest frequencies
      tags:
        - settings
  /settings/languages:
    get:
      description: Get list of supported language codes
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Get supported languages
      tags:
        - settings
  /settings/update:
    put:
      consumes:
        - application/json
      description:
        Update user's settings including currency, language, and notification
        preferences
      parameters:
        - description: Updated settings
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/models.UserSettings"
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description:
            Invalid request body/Invalid currency code/Invalid time zone/Invalid
            language code/Invalid digest frequency
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
        - BearerAuth: []
      summary: Update user settings
      tags:
        - settings
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
